---
layout: page 
---

<!DOCTYPE html> <!-- initiating HTML file -->
<html lang="en"> <!-- setting the lang to eng, important for "autocorrect" and default language -->
<head> <!-- whenever you want to import a library you have start with <head> and import them within <head> ... </head>, for technical data of the web page -->
	<!-- Set-up for the title -->
	<h1 class="title test">Proteins involved in cellular senescence</h1> <!-- refering to the mystyle.css, <h...> and </h...> for headings -->
	<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
	<!-- Initialize a global WBK function -->
	<script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikibase-sdk.min.js"></script> <!-- required for connecting wikidata information to our website -->
	<!-- Initialize a global wdk object using the WBK object -->
	<script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikidata-sdk.min.js"></script> <!-- imports sparql endpoint (bridge between database and sparql query) from wikidata -->
	<link rel="stylesheet" href="/assets/css/mystyle.css"> <!-- link to external style sheet in css -->
</head> <!-- end of head block -->
	
<body> <!-- beginning of body block -->
<div> <!-- makes a space, to break up the code, if you want to manipulate everything in the same compartment, any kind of contenct can be put inside the <div> tag -->
	<!-- Set-up for the subtitle -->
	<p><p> <!-- double space between title and subtitle -->
	<h2>Search for the proteins!</h2> <!-- subtitle on the website -->
	<p>
	<!-- Create table -->
	 <table class="comicGreen"> <!-- refering to style.css, "comicGreen" is the template for the whole table, not just the color -->
	    <tbody> <!-- the code after this line is inside the table (object) -->

	<!-- First row of the table -->
	<tr> <!-- table row -->
	<td>Choose a location in the cell:</td> <!-- <td> is for the opening up of the first column in the table, standard data cell -->
	<td> <!-- adding the second column -->     
		<select class="label success" name="locations" id="locations"> <!-- select calss of label success which its own attribute in the mystyle.css file, name and id are required by HTML, we refer to locations later in sparql query, select class also creates drop down menu -->   
			<option value="basic">- select -</option> <!-- creating a select button -->
			<option value="wd:Q40260">Nucleus</option> <!-- option available in the table -->
			<option value="wd:Q39572">Mitochondria</option> <!-- <option> how we're defining section, section for one option -->
			<option value="wd:Q79899">Cytoplasm</option>
			<option value="wd:Q220599">Cytosol</option>
			<option value="wd:Q14349455">Membrane</option>
			<option value="wd:Q79927">Endoplasmic reticulum</option>
			<option value="wd:Q83181">Golgi apparatus</option>
		</select> <!-- end of the drop down menu -->
	</td> <!-- we end data cell -->
	</tr> <!-- we end the rows -->
		    
	<!-- Second row of the table, imports all the necessary images -->
	<tr>
	<td>Here is where your proteins can be found:</td> <!-- new data cell -->
	<td> <!-- now column that will have images imported -->
		<img id="basic" src="/assets/Pictures/BasicCell.jpg" alt="BasicCell" width="369" height="282"> <!-- image id (naming the image in the code), src (where you are getting the image from), alt (what text will appear in case the image is not loaded), width and height (restricting image sizes - for table formatting) --> 
		<img id="wd:Q40260" src="/assets/Pictures/NucleusLabel.jpg" alt="NucleusInCell" width="369" height="282">
		<img id="wd:Q39572" src="/assets/Pictures/MitochondriaLabel.jpg" alt="MitochondriaInCell" width="369" height="282">
		<img id="wd:Q79899" src="/assets/Pictures/CytoplasmLabel.jpg" alt="CytoplasmInCell" width="369" height="282">
		<img id="wd:Q220599" src="/assets/Pictures/CytosolLabel.jpg" alt="CytosolInCell" width="369" height="282">
		<img id="wd:Q14349455" src="/assets/Pictures/MembraneLabel.jpg" alt="MembraneInCell" width="369" height="282">
		<img id="wd:Q79927" src="/assets/Pictures/ERLabel.jpg" alt="ERInCell" width="369" height="282">
		<img id="wd:Q83181" src="/assets/Pictures/GolgiLabel.jpg" alt="GolgiInCell" width="369" height="282">
	</td> <!-- column is being closed -->
	</tr> <!-- row is closed as well -->
		    
	<!-- Third row of the table -->	    
	<tr> <!-- starting the 3rd row -->
	<td>Choose a type of regulation:</td> <!-- starting and closing a new column -->
	<td> <!-- starting a new column -->
		<select class="label grey"name="type" id="type"> <!-- dropdown menu created (select class), template for the label grey, it's called grey because of the default color, type is created here and called later in sparql query --> 
			<option value="blank">- select -</option> <!-- if nothing is chosen select is written in the dropdown menu -->
			<option value="wd:Q14907008">Upregulated</option> <!-- calling information from sparql query and mystyle.css file (because class="label grey" was defined) -->
			<option value="wd:Q14906419">Downregulated</option>
		</select> <!-- end of drop down menu -->
	</td> <!-- closing the data cell -->
	</tr> <--! closing the table row -->
</tbody> <!-- closing table body -->
</table> <!-- closing table -->

<p>
<input id="submit" type="button" class="label success" value="List Proteins"> <!-- creating the submit button, class is relating back to mystyle.css, value is what text is shown on the button -->
</p>
	
</div>

<div>
    <ol id="list_of_proteins"> <!-- creating the list that is populated by proteins, ol=ordered list -->
    </ol>
</div> 
	
<script> 
	// Error codes in case the user has not entered a correct response, followed by the SPARQL query
	$("#submit").click(async function() { // jquery, when you click the submit button it will do the ..., async function=asynchronous, this code doesn't have to be run in order, reduces the waiting time
		$("#list_of_proteins").empty(); // setting the list of proteins to be empty
		const location = $('#locations').val(); // defining the constants jquery will use, set to be equal to jquery defined before, html element location
		const type = $('#type').val(); 

		if (type == "blank" && location == "basic") // location and type need to be defined inside jquery
			$("#list_of_proteins").text("Error: You did not select a location or a type of regulation."); // error displayed

		else if (location == "basic") // the location wasn't picked
			$("#list_of_proteins").text("Error: You did not select a location."); 

		else if (type == "blank") // type of regulation wasn't picked
			$("#list_of_proteins").text("Error: You did not select a type of regulation."); // $("#list_of_proteins").text converting the list into text, the list was originally empty ($("#list_of_proteins").empty();)
		// Wikidata query to retrieve protein information    
		else { // if all of the "checks" have been passed then the sparql query will run (still jquery)
			const wdquery = `SELECT ?proteinLink ?proteinLinkLabel # sparql query, proteinLink = , proteinLinkLabel=
			WHERE {
				?proteinLink wdt:P31 wd:Q8054. # instance of protein 
				?proteinLink wdt:P703 wd:Q15978631. # found in taxon homo sapiens
				 VALUES ?goBioprocess {${type}}. # search for values of goBioprocess and store it in type, assigning a value to ?goBioprocess, types were all positive or negative regulation of cellular senesence
				?proteinLink wdt:P682 ?goBioprocess. # wdt:P682 = biological process, proteinLink (proteins) which we previously said needs to be homo sapines also needs to be involved in biological process
				VALUES ?goLocation {${location}}. # goLocation = 
				?proteinLink wdt:P681 ?goLocation. # adding the location codes (membrane, golgi, ER ...)
				SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". } # default, taking the english name of what we have been searching for
			}`; /* reformatting the data so it is usable */
			const url = wdk.sparqlQuery(wdquery) /* search the URL constant, search the sparql query we made above */
			const response = await fetch(url) /* needed to request a particular thing (URL in our case), needed to get any result, await to stop the async, result after URL search */
			const results = await response.json() /* for the results to be given as text in json file, additional variable result which will take the response and turn it into json */ 
			const proteinList = wdk.simplify.sparqlResults(results) /* made another constant proteinList, simplification of the results, from json to individual rows, truncates the json */

			/* Statement to return an answer if you choose a location with no proteins. */
			if (proteinList.length == 0) /* if the length is 0, there are no proteins in this location */
			     $("#list_of_proteins").text("There are no proteins of this type in this location."); 

			/* Print a numbered list of proteins in requested location, and embed a hyperlink to each protein's Wikidata page */   
			proteinList.forEach(function(protein) {
			    $("#list_of_proteins").append('<li><a target="_blank" href="https://wikidata.org/wiki/'+protein.proteinLink.value+'">'+protein.proteinLink.label+'</a></li>'); /* in order to have text as a link, <a>=hyperlink */
			});
		}
	});

	// Hide all the imported images except the basic (one with no labels)
	document.getElementById("basic").style.display='block';	// document.getElementById go find the element with id in the brakcet, id is one for image id, style.display is how the image is presented
   	document.getElementById("wd:Q40260").style.display='none'; // 'none' completely removing the photo
   	document.getElementById("wd:Q39572").style.display='none';
   	document.getElementById("wd:Q79899").style.display='none';
   	document.getElementById("wd:Q220599").style.display='none';
    	document.getElementById("wd:Q14349455").style.display='none';
    	document.getElementById("wd:Q79927").style.display='none';
    	document.getElementById("wd:Q83181").style.display='none';

	// Hide all images again, then reveal ONLY the location chosen from the drop-down menu
	$("#locations").change(function(){ /* based on the selection of your location, it will do something differently */
        	document.getElementById("basic").style.display='none'; /* hiding everything again including no display labels */
		document.getElementById("wd:Q40260").style.display='none';
        	document.getElementById("wd:Q39572").style.display='none';
        	document.getElementById("wd:Q79899").style.display='none';
        	document.getElementById("wd:Q220599").style.display='none';
        	document.getElementById("wd:Q14349455").style.display='none';
        	document.getElementById("wd:Q79927").style.display='none';
        	document.getElementById("wd:Q83181").style.display='none';

		var imgId = $("#locations").val(); // creating a variable called imgId which is equal to selected location from the dropdown menu
		document.getElementById(imgId).style.display='block'; /* getting the image that corresponds to image id, presenting that image, setting it to block display */
	});	
	
	// Color the button for downregulated option in red, and the option for upregulated in green
	$("#type").change(function(){ /* listener */
		var typeval = $("#type").val(); /* type of regulation you picked and then it will make a change, variable typeval created */
		if (typeval == "blank") { /* if typeval is blank */
			document.getElementById("type").style.backgroundColor='#DCDCDC'; /* change color to grey */
		} else if (typeval == "wd:Q14907008") { /* if selection is upregulated */
			document.getElementById("type").style.backgroundColor='#00E600'; /* change dropdown menu to shade of green */
		} else if (typeval =="wd:Q14906419") { /* if selection is downregulated */
			document.getElementById("type").style.backgroundColor='red'; /* change dropdown menu to red */
		}
	});
</script>
</body>
</html>
